
AMIT_final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000774  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000638  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f1  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  000013a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000354  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "UART_lib.h"
#include "SPI_lib.h"

int main(void)
{
	DDRB |= (1<<4) | (1<<5) | (1<<7);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6b       	ori	r24, 0xB0	; 176
  70:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<6);
  72:	be 98       	cbi	0x17, 6	; 23
	UART();
  74:	0e 94 4f 00 	call	0x9e	; 0x9e <UART>
	SPI_inti_master();
  78:	0e 94 43 00 	call	0x86	; 0x86 <SPI_inti_master>
    
    while (1) 
    {
		SPI_Send(UART_READ());
  7c:	0e 94 55 00 	call	0xaa	; 0xaa <UART_READ>
  80:	0e 94 4b 00 	call	0x96	; 0x96 <SPI_Send>
  84:	fb cf       	rjmp	.-10     	; 0x7c <main+0x10>

00000086 <SPI_inti_master>:
	DDRB |= (1<<4) | (1<<5) | (1<<7);
	SPCR |= (1<<SPE) | (1<<SPR1) | (1<<SPR0);
}

void SPI_inti_slave(){
	SPCR |= (1<<SPE) | (1<<SPR1) | (1<<SPR0);
  86:	6c 9a       	sbi	0x0d, 4	; 13
  88:	87 b3       	in	r24, 0x17	; 23
  8a:	80 6b       	ori	r24, 0xB0	; 176
  8c:	87 bb       	out	0x17, r24	; 23
  8e:	8d b1       	in	r24, 0x0d	; 13
  90:	83 64       	ori	r24, 0x43	; 67
  92:	8d b9       	out	0x0d, r24	; 13
  94:	08 95       	ret

00000096 <SPI_Send>:
}

void SPI_Send(char send){
	SPDR = send;
  96:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
  98:	77 9b       	sbis	0x0e, 7	; 14
  9a:	fe cf       	rjmp	.-4      	; 0x98 <SPI_Send+0x2>
}
  9c:	08 95       	ret

0000009e <UART>:
	UBRRL=103; 
}

void UART_SEND(char send){
	while (!(UCSRA & (1<<UDRE)));
	UDR=send;
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	88 61       	ori	r24, 0x18	; 24
  a2:	8a b9       	out	0x0a, r24	; 10
  a4:	87 e6       	ldi	r24, 0x67	; 103
  a6:	89 b9       	out	0x09, r24	; 9
  a8:	08 95       	ret

000000aa <UART_READ>:
}

char UART_READ(){
	while(!(UCSRA & (1<<RXC)));
  aa:	5f 9b       	sbis	0x0b, 7	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <UART_READ>
	return UDR;
  ae:	8c b1       	in	r24, 0x0c	; 12
}
  b0:	08 95       	ret

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
