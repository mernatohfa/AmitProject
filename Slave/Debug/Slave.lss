
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a0  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c2  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000318  00000000  00000000  00000e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001148  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000325  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  000014e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include "SPI_lib.h"

int main(void)
{
    DDRD |= (1<<0)|(1<<1);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	81 bb       	out	0x11, r24	; 17
	SPI_inti_slave();
  72:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_inti_slave>
    while (1) 
    {
		char signal = SPI_Resive();
  76:	0e 94 54 00 	call	0xa8	; 0xa8 <SPI_Resive>
		switch (signal){
  7a:	82 37       	cpi	r24, 0x72	; 114
  7c:	49 f0       	breq	.+18     	; 0x90 <main+0x24>
  7e:	18 f4       	brcc	.+6      	; 0x86 <main+0x1a>
  80:	87 36       	cpi	r24, 0x67	; 103
  82:	41 f0       	breq	.+16     	; 0x94 <main+0x28>
  84:	f8 cf       	rjmp	.-16     	; 0x76 <main+0xa>
  86:	88 37       	cpi	r24, 0x78	; 120
  88:	39 f0       	breq	.+14     	; 0x98 <main+0x2c>
  8a:	89 37       	cpi	r24, 0x79	; 121
  8c:	39 f0       	breq	.+14     	; 0x9c <main+0x30>
  8e:	f3 cf       	rjmp	.-26     	; 0x76 <main+0xa>
			case 'r':
				PORTD |=1;
  90:	90 9a       	sbi	0x12, 0	; 18
				break;
  92:	f1 cf       	rjmp	.-30     	; 0x76 <main+0xa>
			case 'g':
				PORTD &=~(1<<0);
  94:	90 98       	cbi	0x12, 0	; 18
				break;
  96:	ef cf       	rjmp	.-34     	; 0x76 <main+0xa>
			case 'x':
				PORTD |=(1<<1);
  98:	91 9a       	sbi	0x12, 1	; 18
				break;
  9a:	ed cf       	rjmp	.-38     	; 0x76 <main+0xa>
			case 'y':
				PORTD &=~(1<<1);
  9c:	91 98       	cbi	0x12, 1	; 18
				break;
  9e:	eb cf       	rjmp	.-42     	; 0x76 <main+0xa>

000000a0 <SPI_inti_slave>:
}

void SPI_Send(char send){
	SPDR = send;
	while(!(SPSR & (1<<SPIF)));
}
  a0:	8d b1       	in	r24, 0x0d	; 13
  a2:	83 64       	ori	r24, 0x43	; 67
  a4:	8d b9       	out	0x0d, r24	; 13
  a6:	08 95       	ret

000000a8 <SPI_Resive>:

char SPI_Resive(){
	while(!(SPSR & (1<<SPIF)));
  a8:	77 9b       	sbis	0x0e, 7	; 14
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <SPI_Resive>
	return SPDR;
  ac:	8f b1       	in	r24, 0x0f	; 15
  ae:	08 95       	ret

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
